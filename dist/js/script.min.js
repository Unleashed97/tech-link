/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/modules/functions.js":
/*!*************************************!*\
  !*** ./src/js/modules/functions.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"handleForm\": () => (/* binding */ handleForm),\n/* harmony export */   \"handleModal\": () => (/* binding */ handleModal)\n/* harmony export */ });\nconst handleModal = () => {\r\n    const modals = document.querySelectorAll('.modal')\r\n\r\n    const modalOpenBtns = document.querySelectorAll('.modal-open-btn')\r\n\r\n    if (modalOpenBtns.length) {\r\n        modalOpenBtns.forEach((btn) =>\r\n            btn.addEventListener('click', () => {\r\n                const modal = document.querySelector(\r\n                    `.${btn.getAttribute('data-target')}`,\r\n                )\r\n\r\n                if (modal) {\r\n                    modal.classList.add('active')\r\n                    // document.body.classList.add('fixed')\r\n\r\n                    const scrollY =\r\n                        document.documentElement.style.getPropertyValue(\r\n                            '--scroll-y',\r\n                        )\r\n                    modal.style.top = `${scrollY}`\r\n                    const body = document.body\r\n                    body.style.position = 'fixed'\r\n                    body.style.top = `-${scrollY}`\r\n\r\n                    const modalCloseBtn = modal.querySelector('.modal__close')\r\n\r\n                    if (modalCloseBtn) {\r\n                        modalCloseBtn.addEventListener('click', () => {\r\n                            modal.classList.remove('active')\r\n                            // document.body.classList.remove('fixed')\r\n\r\n                            const body = document.body\r\n                            const scrollY = body.style.top\r\n                            body.style.position = ''\r\n                            window.scrollTo(0, parseInt(scrollY || '0') * -1)\r\n                        })\r\n                    }\r\n                    window.addEventListener('click', (e) => {\r\n                        if (e.target === modal) {\r\n                            modal.classList.remove('active')\r\n                            // document.body.classList.remove('fixed')\r\n\r\n                            const body = document.body\r\n                            const scrollY = body.style.top\r\n                            body.style.position = ''\r\n                            window.scrollTo(0, parseInt(scrollY || '0') * -1)\r\n                        }\r\n                    })\r\n                }\r\n            }),\r\n        )\r\n\r\n        window.addEventListener('scroll', () => {\r\n            document.documentElement.style.setProperty(\r\n                '--scroll-y',\r\n                `${window.scrollY}px`,\r\n            )\r\n        })\r\n    }\r\n}\r\n\r\nconst handleForm = () => {\r\n    const formList = document.querySelectorAll('.form')\r\n\r\n    if (formList.length) {\r\n        formList.forEach((form) => {\r\n            const formSubmitBtn = form.querySelector('.form__btn')\r\n\r\n            formSubmitBtn.addEventListener('click', (e) => {\r\n                e.preventDefault()\r\n\r\n                let errors = formValidate(form)\r\n\r\n                if (errors === 0) {\r\n                    const modal = form.closest('.modal')\r\n\r\n                    modal.classList.remove('active')\r\n\r\n                    const body = document.body\r\n                    const scrollY = body.style.top\r\n                    body.style.position = ''\r\n                    window.scrollTo(0, parseInt(scrollY || '0') * -1)\r\n\r\n                    alert('Форма отправлена')\r\n                }\r\n            })\r\n        })\r\n\r\n        function formValidate(form) {\r\n            let error = 0\r\n            let requiredFields = form.querySelectorAll('[required]')\r\n\r\n            requiredFields.forEach((field) => {\r\n                formRemoveError(field)\r\n\r\n                if (\r\n                    field.getAttribute('type') === 'checkbox' &&\r\n                    field.checked === false\r\n                ) {\r\n                    formAddError(field)\r\n                    error++\r\n                } else {\r\n                    if (field.value === '') {\r\n                        formAddError(field)\r\n                        error++\r\n                    }\r\n                }\r\n            })\r\n\r\n            return error\r\n        }\r\n\r\n        function formAddError(field) {\r\n            if (field.type === 'checkbox') {\r\n                const label = field.closest('.form__label')\r\n\r\n                label.querySelector('.form__check-field').classList.add('error')\r\n            }\r\n\r\n            field.classList.add('error')\r\n            const fieldParentBlock = field.closest('.form__group')\r\n            fieldParentBlock.classList.add('error')\r\n        }\r\n        function formRemoveError(field) {\r\n            if (field.type === 'checkbox') {\r\n                const label = field.closest('.form__label')\r\n\r\n                label\r\n                    .querySelector('.form__check-field')\r\n                    .classList.remove('error')\r\n            }\r\n\r\n            field.classList.remove('error')\r\n            const fieldParentBlock = field.closest('.form__group')\r\n            fieldParentBlock.classList.remove('error')\r\n        }\r\n\r\n        const fileBlock = document.querySelector('.file')\r\n\r\n        if (fileBlock) {\r\n            const filePlaceholder = fileBlock.querySelector(\r\n                '.file__content-block',\r\n            )\r\n\r\n            const filePreview = fileBlock.querySelector('.file__preview')\r\n\r\n            const fileInput = fileBlock.querySelector('.form__file')\r\n            const fileBufferBtn = fileBlock.querySelector('.file__btn-buffer')\r\n            const fileAddImgBtn = fileBlock.querySelector('.file__btn-add')\r\n            const fileLabel = fileBlock.querySelector('#file-label')\r\n\r\n            const files = []\r\n\r\n            fileLabel.addEventListener('drop', handleDrop, false)\r\n\r\n            function handleDrop(e) {\r\n                let dt = e.dataTransfer\r\n                files = dt.files\r\n\r\n                filePlaceholder.classList.add('hide')\r\n                uploadFiles(fileInput.files)\r\n            }\r\n\r\n            fileAddImgBtn.addEventListener('click', () => {\r\n                fileInput.click()\r\n            })\r\n\r\n            window.addEventListener('paste', (e) => {\r\n                fileInput.files = e.clipboardData.files\r\n\r\n                console.log(e.clipboardData.files)\r\n\r\n                filePlaceholder.classList.add('hide')\r\n                uploadFiles(fileInput.files)\r\n            })\r\n\r\n            fileBufferBtn.addEventListener('click', async () => {\r\n                const clipboardContents = await navigator.clipboard.read()\r\n                for (const item of clipboardContents) {\r\n                    if (!item.types.includes('image/png')) {\r\n                        throw new Error('Clipboard contains non-image data.')\r\n                    }\r\n                    const blob = await item.getType('image/png')\r\n\r\n                    fileInput.files = new File(\r\n                        URL.createObjectURL(blob),\r\n                        'filename',\r\n                    )\r\n                }\r\n\r\n                console.log(clipboardContents)\r\n                fileInput.files = clipboardContents\r\n\r\n                // filePlaceholder.classList.add('hide')\r\n                // uploadFiles(fileInput.files)\r\n            })\r\n\r\n            fileInput.addEventListener('change', () => {\r\n                filePlaceholder.classList.add('hide')\r\n                uploadFiles(fileInput.files)\r\n            })\r\n\r\n            function uploadFiles(filesList) {\r\n                files.push(...filesList)\r\n                updateThumbnails()\r\n            }\r\n\r\n            function removeFile(name) {\r\n                const index = files.findIndex((file) => file.name === name)\r\n                if (index === -1) return\r\n                files.splice(index, 1)\r\n\r\n                updateThumbnails()\r\n            }\r\n\r\n            function makeThumbnail(file) {\r\n                return new Promise((resolve) => {\r\n                    const reader = new FileReader()\r\n\r\n                    function onLoad(event) {\r\n                        filePreview.classList.add('show')\r\n                        const fileImage = `<div class=\"image__wrapper\">\r\n                                <button type=\"button\" data-target=\"${file.name}\" class=\"btn btn-remove-file\">\r\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <circle cx=\"8\" cy=\"8\" r=\"8\" fill=\"#F67F29\"/>\r\n                                        <path d=\"M5.17188 10.8284L10.8287 5.17158\" stroke=\"white\"/>\r\n                                        <path d=\"M5.17188 5.17157L10.8287 10.8284\" stroke=\"white\"/>\r\n                                    </svg>\r\n                                </button>\r\n                                <img src=\"${event.target.result}\" alt=\"${file.name}\">`\r\n                        filePreview.insertAdjacentHTML('beforeend', fileImage)\r\n\r\n                        const btn = filePreview.querySelectorAll('.btn')\r\n                        btn.forEach((btn) =>\r\n                            btn.addEventListener('click', () =>\r\n                                removeFile(btn.getAttribute('data-target')),\r\n                            ),\r\n                        )\r\n                    }\r\n\r\n                    reader.onload = onLoad\r\n                    reader.onerror = () => resolve(null)\r\n\r\n                    reader.readAsDataURL(file)\r\n                })\r\n            }\r\n\r\n            function removeChildren(node) {\r\n                while (node.lastChild) node.lastChild.remove()\r\n                return node\r\n            }\r\n\r\n            function updateThumbnails() {\r\n                const thumbnails = document.querySelector('.file__preview')\r\n                thumbnails.innerHTML = ''\r\n                const input = document.querySelector('.form__file')\r\n                input.value = ''\r\n\r\n                // files.map(file => {})\r\n                if (files.length) {\r\n                    Promise.all(files.map(makeThumbnail))\r\n                        .then((images) => {\r\n                            images.filter((img) => img !== null)\r\n                        })\r\n                        .then((images) =>\r\n                            removeChildren(thumbnails).append(...images),\r\n                        )\r\n                } else {\r\n                    thumbnails.classList.remove('show')\r\n                    filePlaceholder.classList.remove('hide')\r\n                }\r\n            }\r\n\r\n            // function removeFile(e) {\r\n            //     ;`   `\r\n            //     console.log(e)\r\n            // }\r\n\r\n            // function uploadFile(files) {\r\n            //     Object.keys(files).forEach((i) => {\r\n            //         const file = files[i]\r\n            //         const reader = new FileReader()\r\n            //         reader.onload = (e) => {\r\n            //             filePreview.classList.add('show')\r\n            //             filePreview.innerHTML += `<div class=\"image__wrapper\">\r\n            //             <button type=\"button\" class=\"btn btn-remove-file\" onclick=\"removeFile()\">\r\n            //                 <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            //                     <circle cx=\"8\" cy=\"8\" r=\"8\" fill=\"#F67F29\"/>\r\n            //                     <path d=\"M5.17188 10.8284L10.8287 5.17158\" stroke=\"white\"/>\r\n            //                     <path d=\"M5.17188 5.17157L10.8287 10.8284\" stroke=\"white\"/>\r\n            //                 </svg>\r\n            //             </button>\r\n            //             <img src=\"${e.target.result}\" alt=\"Фото\">\r\n            //         </div>`\r\n            //         }\r\n            //         reader.readAsDataURL(file)\r\n            //     })\r\n            // }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://layout-template/./src/js/modules/functions.js?");

/***/ }),

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/functions.js */ \"./src/js/modules/functions.js\");\n\r\n_modules_functions_js__WEBPACK_IMPORTED_MODULE_0__.handleModal()\r\n_modules_functions_js__WEBPACK_IMPORTED_MODULE_0__.handleForm()\r\n\n\n//# sourceURL=webpack://layout-template/./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./src/js/script.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/modules/functions.js");
/******/ 	
/******/ })()
;